=begin
#OpenStax Kenetic API

#The Kenetic API for OpenStax.  Requests to this API should include `application/json` in the `Accept` header.  The desired API version is specified in the request URL, e.g. `[domain]/api/v0/researcher/studies`. While the API does support a default version, that version will change over time and therefore should not be used in production code! 

OpenAPI spec version: 0.1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.13

=end

require 'date'

module Api::V0::Bindings
  class StudyUpdate
    # The study ID.
    attr_accessor :id

    # The study name that participants see.
    attr_accessor :title_for_participants

    # An study name that only researchers see.
    attr_accessor :title_for_researchers

    # A short study description.
    attr_accessor :short_description

    # A long study description.
    attr_accessor :long_description

    # The tags of the study object, used for grouping and filtering.
    attr_accessor :tags

    # The expected study duration in minutes.
    attr_accessor :duration_minutes

    # When the study opens for participation; null means not open.
    attr_accessor :opens_at

    # When the study closes for participation; null means does not close.
    attr_accessor :closes_at

    # Mandatory studies must be completed by all users
    attr_accessor :is_mandatory

    # How many points will be awarded for participation in the study
    attr_accessor :participation_points

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'title_for_participants' => :'title_for_participants',
        :'title_for_researchers' => :'title_for_researchers',
        :'short_description' => :'short_description',
        :'long_description' => :'long_description',
        :'tags' => :'tags',
        :'duration_minutes' => :'duration_minutes',
        :'opens_at' => :'opens_at',
        :'closes_at' => :'closes_at',
        :'is_mandatory' => :'is_mandatory',
        :'participation_points' => :'participation_points'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'id' => :'Integer',
        :'title_for_participants' => :'String',
        :'title_for_researchers' => :'String',
        :'short_description' => :'String',
        :'long_description' => :'String',
        :'tags' => :'Array<String>',
        :'duration_minutes' => :'Integer',
        :'opens_at' => :'DateTime',
        :'closes_at' => :'DateTime',
        :'is_mandatory' => :'BOOLEAN',
        :'participation_points' => :'Float'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'title_for_participants')
        self.title_for_participants = attributes[:'title_for_participants']
      end

      if attributes.has_key?(:'title_for_researchers')
        self.title_for_researchers = attributes[:'title_for_researchers']
      end

      if attributes.has_key?(:'short_description')
        self.short_description = attributes[:'short_description']
      end

      if attributes.has_key?(:'long_description')
        self.long_description = attributes[:'long_description']
      end

      if attributes.has_key?(:'tags')
        if (value = attributes[:'tags']).is_a?(Array)
          self.tags = value
        end
      end

      if attributes.has_key?(:'duration_minutes')
        self.duration_minutes = attributes[:'duration_minutes']
      end

      if attributes.has_key?(:'opens_at')
        self.opens_at = attributes[:'opens_at']
      end

      if attributes.has_key?(:'closes_at')
        self.closes_at = attributes[:'closes_at']
      end

      if attributes.has_key?(:'is_mandatory')
        self.is_mandatory = attributes[:'is_mandatory']
      end

      if attributes.has_key?(:'participation_points')
        self.participation_points = attributes[:'participation_points']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@title_for_participants.nil? && @title_for_participants.to_s.length < 1
        invalid_properties.push('invalid value for "title_for_participants", the character length must be great than or equal to 1.')
      end

      if !@title_for_researchers.nil? && @title_for_researchers.to_s.length < 1
        invalid_properties.push('invalid value for "title_for_researchers", the character length must be great than or equal to 1.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@title_for_participants.nil? && @title_for_participants.to_s.length < 1
      return false if !@title_for_researchers.nil? && @title_for_researchers.to_s.length < 1
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] title_for_participants Value to be assigned
    def title_for_participants=(title_for_participants)
      if !title_for_participants.nil? && title_for_participants.to_s.length < 1
        fail ArgumentError, 'invalid value for "title_for_participants", the character length must be great than or equal to 1.'
      end

      @title_for_participants = title_for_participants
    end

    # Custom attribute writer method with validation
    # @param [Object] title_for_researchers Value to be assigned
    def title_for_researchers=(title_for_researchers)
      if !title_for_researchers.nil? && title_for_researchers.to_s.length < 1
        fail ArgumentError, 'invalid value for "title_for_researchers", the character length must be great than or equal to 1.'
      end

      @title_for_researchers = title_for_researchers
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          title_for_participants == o.title_for_participants &&
          title_for_researchers == o.title_for_researchers &&
          short_description == o.short_description &&
          long_description == o.long_description &&
          tags == o.tags &&
          duration_minutes == o.duration_minutes &&
          opens_at == o.opens_at &&
          closes_at == o.closes_at &&
          is_mandatory == o.is_mandatory &&
          participation_points == o.participation_points
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, title_for_participants, title_for_researchers, short_description, long_description, tags, duration_minutes, opens_at, closes_at, is_mandatory, participation_points].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Api::V0::Bindings.const_get(type).new
        temp_model.tap{|tm| tm.build_from_hash(value)}
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
